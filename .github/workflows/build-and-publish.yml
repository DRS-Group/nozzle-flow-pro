name: Build and Publish Electron ARM64

on:
  push:
    branches: [release]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the private repository
      - uses: actions/checkout@v4

      # 2️⃣ Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 22

      # 3️⃣ Install dependencies
      - run: npm ci
        working-directory: ./app

      # 4️⃣ Build the Electron app for Linux ARM64
      - run: npx electron-forge make --platform linux --arch arm64
        working-directory: ./app

      # 5️⃣ List all .deb files recursively (for debugging)
      - name: List all .deb files recursively
        run: |
          echo "Searching for .deb files in ./app recursively:"
          find ./app -type f -name "*.deb"

      # 6️⃣ Find the first generated .deb file safely
      - name: Locate .deb file
        id: find_deb
        run: |
          DEB_FILE=$(find ./app/out/make/deb -type f -name "*.deb" | head -n 1)
          if [ -z "$DEB_FILE" ]; then
            echo "No .deb file found, exiting."
            exit 1
          fi
          echo "DEB_FILE=$DEB_FILE" >> $GITHUB_ENV
          echo "Found .deb file: $DEB_FILE"

      # 7️⃣ Create GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Electron ARM64 v1.0.0
          draft: false
          prerelease: false

      # 8️⃣ Upload .deb to release
      - name: Upload .deb to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DEB_FILE }}
          asset_name: d-flow_1.0.0_arm64.deb
          asset_content_type: application/vnd.debian.binary-package
